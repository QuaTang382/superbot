import asyncio
import os
import re
from telegram import Update, InputFile, BotCommand
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# ======= CONFIG =======
TOKEN = "8440205431:AAGthcmlLZRe_TYufKXKKDUDV2rXSVvD5fg"   # thay b·∫±ng token bot c·ªßa b·∫°n
ADMIN_ID = 6132441793          # thay b·∫±ng ID admin
RUNNING = True
current_process = None

# regex ƒë·ªÉ x√≥a m√£ m√†u ANSI
ansi_escape = re.compile(r'\x1B\[[0-?]*[ -/]*[@-~]')

# ======= COMMANDS =======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not RUNNING:
        return
    user = update.effective_user
    await update.message.reply_text(f"Xin ch√†o {user.first_name}, t√¥i l√† bot panel ch·∫°y bash script")

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not RUNNING:
        return
    help_text = """
Danh s√°ch l·ªánh‚ö°:
  /cau - ch·∫°y script cau.sh
L·ªánh d√†nh cho Adminüëë:
  /stopbot - d·ª´ng bot
  /startbot - b·∫≠t l·∫°i bot
"""
    await update.message.reply_text(help_text)

async def run_bash(update: Update, context: ContextTypes.DEFAULT_TYPE, script: str):
    global current_process, RUNNING
    if not RUNNING:
        return

    if current_process:
        await update.message.reply_text("M·ªôt ti·∫øn tr√¨nh kh√°c ƒëang ch·∫°y, vui l√≤ng ƒë·ª£i.")
        return

    before_files = set(os.listdir("."))

    async def run():
        global current_process
        proc = await asyncio.create_subprocess_shell(
            f"bash {script}",
            stdin=asyncio.subprocess.PIPE,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.STDOUT
        )
        current_process = proc
        try:
            while True:
                line = await proc.stdout.readline()
                if not line:
                    break
                # decode + remove ANSI escape codes
                text = ansi_escape.sub('', line.decode()).strip()

                # ‚úÖ ch·ªâ g·ª≠i khi c√≥ n·ªôi dung
                if text:
                    # N·∫øu c√≥ s·ªë option d·∫°ng "99 Exit" -> gi·ªØ nguy√™n ƒë·ªÉ user d·ªÖ ch·ªçn
                    await update.message.reply_text(text, reply_to_message_id=update.message.message_id)

            await proc.wait()
        finally:
            current_process = None
            after_files = set(os.listdir("."))
            new_files = after_files - before_files
            for file in new_files:
                if os.path.isfile(file):
                    try:
                        await update.message.reply_document(InputFile(file))
                    except:
                        pass

    asyncio.create_task(run())

async def cau(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await run_bash(update, context, "cau.sh")

async def stopbot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global RUNNING
    if update.effective_user.id == ADMIN_ID:
        RUNNING = False
        await update.message.reply_text("Bot ƒë√£ d·ª´ng ho·∫°t ƒë·ªông.")
    else:
        await update.message.reply_text("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán l·ªánh n√†y.")

async def startbot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global RUNNING
    if update.effective_user.id == ADMIN_ID:
        RUNNING = True
        await update.message.reply_text("Bot ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t l·∫°i.")
    else:
        await update.message.reply_text("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán l·ªánh n√†y.")

async def user_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global current_process, RUNNING
    if not RUNNING:
        return
    if current_process:
        text = update.message.text + "\n"
        current_process.stdin.write(text.encode())
        await current_process.stdin.drain()

# ======= MAIN =======
async def set_commands(application: Application):
    commands = [
        BotCommand("start", "Gi·ªõi thi·ªáu bot"),
        BotCommand("help", "Danh s√°ch l·ªánh"),
        BotCommand("cau", "Ch·∫°y script cau.sh"),
        BotCommand("stopbot", "D·ª´ng bot (Admin only)"),
        BotCommand("startbot", "B·∫≠t l·∫°i bot (Admin only)")
    ]
    await application.bot.set_my_commands(commands)

def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("cau", cau))
    app.add_handler(CommandHandler("stopbot", stopbot))
    app.add_handler(CommandHandler("startbot", startbot))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, user_input))

    app.post_init = set_commands  # c√†i menu l·ªánh

    app.run_polling()

if __name__ == "__main__":
    main()